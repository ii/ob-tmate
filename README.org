* ob-tmate
Ob-tmate is an Emacs library that allows org mode to evaluate code
blocks in a tmate session.

Ob-tmate is useful for keeping notes on how to perform tasks in the
terminal, especially when some interactivity is required. The
functionality can be used to document software installation, build
instructions, and administrative tasks. The documentation can be
tested and adjusted while it is written.
* Installation
Unfortunately, ob-tmate has not yet been added to melpa. You will need
to copy the ~ob-tmate.el~ file to a directory in your ~load-path~.
** Configuration
In your ~.emacs~ or ~.emacs.d/init.el~ file, add the following:
#+BEGIN_SRC elisp
  (require 'ob-tmate)
  (setq org-babel-default-header-args:tmate
    '((:results . "silent")		;
      (:session . "default")	; The default tmate session to send code to
      (:socket  . nil)              ; The default tmate socket to communicate with
      ;; You can use "xterm" and "gnome-terminal".
      ;; On mac, you can use "iterm" as well.
      (:terminal . "gnome-terminal")))

  ;; The tmate sessions are prefixed with the following string.
  ;; You can customize this if you like.
  (setq org-babel-tmate-session-prefix "ob-")

  ;; Finally, if your tmate is not in your $PATH for whatever reason, you
  ;; may set the path to the tmate binary as follows:
  (setq org-babel-tmate-location "/usr/bin/tmate")


#+END_SRC
* Usage
You can start a new terminal window with a tmate session as follows:
: #+BEGIN_SRC tmate :session hello
: echo hello
: #+END_SRC
If you press =C-c C-c= with your point in the code block, a terminal
window will pop up with a new tmate session named
=org-babel-session-hello=.

You can continue work in this session with another code block.
: #+BEGIN_SRC tmate :session hello
: echo world
: #+END_SRC
If you press =C-c C-c= now, no new terminal window will open, but the
code will be sent to the existing tmate session.

You can also specify to which tmate window the source block should be
sent. If the tmate window does not yet exist, ob-tmate will create it.
To specify the window, you may use the tmate target syntax. In the
following example, the ~:session~ argument has been changed to
=hello:new-world=:
: #+BEGIN_SRC tmate :session hello:new-window
: echo hello world in new-window
: #+END_SRC
Executing this code block will add a window, ~new-window~, to your
session.

You can exit your tmate session by detaching. The terminal window will
close automatically. Ob-tmate will not detect that you have
detached. Any commands you send will be sent to the tmate session in
the background. You can reattach to your tmate session at any time and
check that the commands have indeed been executed.

*Tip*. Ob-tmate is also very useful for restarting your tmate sessions
after a reboot. Take a look at the following snippet.
: ** Startup tmate
: Use ~C-c C-v s~ to execute subtree.
: *** Jupyter
: #+BEGIN_SRC tmate :session daemons:jupyter
: cd ~/projects/notebooks/
: jupyter notebook
: #+END_SRC
: *** htop
: #+BEGIN_SRC tmate session daemons:htop
: htop
: #+END_SRC
: *** dmesg
: #+BEGIN_SRC tmate :session daemons:dmesg
: dmesg
: #+END_SRC
If your point is on the =Startup tmate= header, you can execute all
code blocks in the subtree with ~C-c C-v s~ to restart your favorite
tmate sessions.
** Sockets: remoting
If you want your code to execute on a remote machine, you can use
=ob-tmate= too. There are two ways to control a remote machine. The
first is to simply SSH into the remote machine and execute code from
there:

: #+BEGIN_SRC tmate
: ssh remote-machine
: #+END_SRC
: #+BEGIN_SRC tmate
: echo do things...
: #+END_SRC

This method has one big downside: long-running code might be
interrupted when you lose connection. This method does not start a
tmate session on the remote computer; it only starts a tmate session on
the local computer.

The other method is to start a remote tmate session and share the
remote tmate socket with your local machine.
It is possible to start a remote tmate session:
#+BEGIN_SRC sh
ssh remote-machine -t tmate new -d
#+END_SRC
This creates a socket on the remote machine. You can forward this
socket to the local machine as follows:
#+BEGIN_SRC sh
  REMOTE_SOCKET=$(ssh remote-machine  'tmate ls -F "#{socket_path}"' | head -1)
  echo $REMOTE_SOCKET
  ssh remote-machine -tfN \
      -L ~/.tmate-local-socket-remote-machine:$REMOTE_SOCKET
#+END_SRC

Now you can execute code on the remote machine:
: #+BEGIN_SRC tmate :socket ~/.tmate-local-socket-remote-machine :session hello
: echo hello from remote machine
: #+END_SRC

There are some advantages to this method, especially with long running
jobs. For instance, if your local machine is rebooted the remote tmate
session remains running and you can always reconnect. Furthermore, you
do not have to prepend =ssh remote-machine= to every tmate source code
block. This saves time and makes sure that you code is reexecutable:
you can execute the same code block twice and it will (hopefully) work
the same. It will not try to SSH into the remote machine again while
it is already logged in remotely.

* Known bugs and or possible issues
My tmate indexes start at 1. By default, tmate window indexes start at
zero. This might lead to problems. I have not yet checked.

Terminals other than xterm and gnome-terminal have not been
tested. If you have positive or negative experiences with any other
terminal, let me know.

I will try to respond within a week to any issues raised. I cannot
promise I will fix them.
* Contributions
Contributions are always welcome. Please be in touch before you make
sweeping changes or add large features. This may prevent
disappointment and will help me help you.
